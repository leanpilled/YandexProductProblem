[
    {
        "label": "sqlalchemy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ARRAY",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Date",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "and_",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ARRAY",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "insert",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "engine_from_config",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "pool",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "and_",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "any_",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "update",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Float",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "app.db",
        "description": "app.db",
        "isExtraImport": true,
        "detail": "app.db",
        "documentation": {}
    },
    {
        "label": "async_session_maker",
        "importPath": "app.db",
        "description": "app.db",
        "isExtraImport": true,
        "detail": "app.db",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "app.db",
        "description": "app.db",
        "isExtraImport": true,
        "detail": "app.db",
        "documentation": {}
    },
    {
        "label": "async_session_maker",
        "importPath": "app.db",
        "description": "app.db",
        "isExtraImport": true,
        "detail": "app.db",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "app.db",
        "description": "app.db",
        "isExtraImport": true,
        "detail": "app.db",
        "documentation": {}
    },
    {
        "label": "async_session_maker",
        "importPath": "app.db",
        "description": "app.db",
        "isExtraImport": true,
        "detail": "app.db",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "app.db",
        "description": "app.db",
        "isExtraImport": true,
        "detail": "app.db",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseSettings",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Couriers",
        "importPath": "app.couriers.models",
        "description": "app.couriers.models",
        "isExtraImport": true,
        "detail": "app.couriers.models",
        "documentation": {}
    },
    {
        "label": "Couriers",
        "importPath": "app.couriers.models",
        "description": "app.couriers.models",
        "isExtraImport": true,
        "detail": "app.couriers.models",
        "documentation": {}
    },
    {
        "label": "BaseDAO",
        "importPath": "app.dao.base",
        "description": "app.dao.base",
        "isExtraImport": true,
        "detail": "app.dao.base",
        "documentation": {}
    },
    {
        "label": "BaseDAO",
        "importPath": "app.dao.base",
        "description": "app.dao.base",
        "isExtraImport": true,
        "detail": "app.dao.base",
        "documentation": {}
    },
    {
        "label": "Assignments",
        "importPath": "app.assignments.models",
        "description": "app.assignments.models",
        "isExtraImport": true,
        "detail": "app.assignments.models",
        "documentation": {}
    },
    {
        "label": "Assignments",
        "importPath": "app.assignments.models",
        "description": "app.assignments.models",
        "isExtraImport": true,
        "detail": "app.assignments.models",
        "documentation": {}
    },
    {
        "label": "Assignments",
        "importPath": "app.assignments.models",
        "description": "app.assignments.models",
        "isExtraImport": true,
        "detail": "app.assignments.models",
        "documentation": {}
    },
    {
        "label": "Orders",
        "importPath": "app.orders.models",
        "description": "app.orders.models",
        "isExtraImport": true,
        "detail": "app.orders.models",
        "documentation": {}
    },
    {
        "label": "Orders",
        "importPath": "app.orders.models",
        "description": "app.orders.models",
        "isExtraImport": true,
        "detail": "app.orders.models",
        "documentation": {}
    },
    {
        "label": "Orders",
        "importPath": "app.orders.models",
        "description": "app.orders.models",
        "isExtraImport": true,
        "detail": "app.orders.models",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "CouriersDAO",
        "importPath": "app.couriers.dao",
        "description": "app.couriers.dao",
        "isExtraImport": true,
        "detail": "app.couriers.dao",
        "documentation": {}
    },
    {
        "label": "SCouriers",
        "importPath": "app.couriers.schemas",
        "description": "app.couriers.schemas",
        "isExtraImport": true,
        "detail": "app.couriers.schemas",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "context",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "fileConfig",
        "importPath": "logging.config",
        "description": "logging.config",
        "isExtraImport": true,
        "detail": "logging.config",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "dirname",
        "importPath": "os.path",
        "description": "os.path",
        "isExtraImport": true,
        "detail": "os.path",
        "documentation": {}
    },
    {
        "label": "abspath",
        "importPath": "os.path",
        "description": "os.path",
        "isExtraImport": true,
        "detail": "os.path",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "app.config",
        "description": "app.config",
        "isExtraImport": true,
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "app.config",
        "description": "app.config",
        "isExtraImport": true,
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "OrdersDAO",
        "importPath": "app.orders.dao",
        "description": "app.orders.dao",
        "isExtraImport": true,
        "detail": "app.orders.dao",
        "documentation": {}
    },
    {
        "label": "SOrders",
        "importPath": "app.orders.schemas",
        "description": "app.orders.schemas",
        "isExtraImport": true,
        "detail": "app.orders.schemas",
        "documentation": {}
    },
    {
        "label": "FOrders",
        "importPath": "app.orders.schemas",
        "description": "app.orders.schemas",
        "isExtraImport": true,
        "detail": "app.orders.schemas",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "create_async_engine",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "DeclarativeBase",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Limiter",
        "importPath": "slowapi",
        "description": "slowapi",
        "isExtraImport": true,
        "detail": "slowapi",
        "documentation": {}
    },
    {
        "label": "_rate_limit_exceeded_handler",
        "importPath": "slowapi",
        "description": "slowapi",
        "isExtraImport": true,
        "detail": "slowapi",
        "documentation": {}
    },
    {
        "label": "get_remote_address",
        "importPath": "slowapi.util",
        "description": "slowapi.util",
        "isExtraImport": true,
        "detail": "slowapi.util",
        "documentation": {}
    },
    {
        "label": "SlowAPIMiddleware",
        "importPath": "slowapi.middleware",
        "description": "slowapi.middleware",
        "isExtraImport": true,
        "detail": "slowapi.middleware",
        "documentation": {}
    },
    {
        "label": "RateLimitExceeded",
        "importPath": "slowapi.errors",
        "description": "slowapi.errors",
        "isExtraImport": true,
        "detail": "slowapi.errors",
        "documentation": {}
    },
    {
        "label": "router",
        "importPath": "app.couriers.router",
        "description": "app.couriers.router",
        "isExtraImport": true,
        "detail": "app.couriers.router",
        "documentation": {}
    },
    {
        "label": "router",
        "importPath": "app.orders.router",
        "description": "app.orders.router",
        "isExtraImport": true,
        "detail": "app.orders.router",
        "documentation": {}
    },
    {
        "label": "Assignments",
        "kind": 6,
        "importPath": "app.assignments.models",
        "description": "app.assignments.models",
        "peekOfCode": "class Assignments(Base):\n    __tablename__ = \"assignments\"\n    id = Column(Integer, primary_key=True)\n    courier_id = Column(Integer, ForeignKey(\"couriers.id\"))\n    time = Column(String, nullable=False)\n    order_id = Column(ARRAY(Integer), nullable=False)\n    date = Column(Date, nullable=False)",
        "detail": "app.assignments.models",
        "documentation": {}
    },
    {
        "label": "SAssignments",
        "kind": 6,
        "importPath": "app.assignments.schemas",
        "description": "app.assignments.schemas",
        "peekOfCode": "class SAssignments(BaseModel):\n    courier_id: int\n    time: str\n    order_ids: list[int]\n    date: date\n    class Config:\n        orm_mode = True",
        "detail": "app.assignments.schemas",
        "documentation": {}
    },
    {
        "label": "CouriersDAO",
        "kind": 6,
        "importPath": "app.couriers.dao",
        "description": "app.couriers.dao",
        "peekOfCode": "class CouriersDAO(BaseDAO):\n    model = Couriers\n    @classmethod\n    async def get_courier_type(cls, courier_id: int):\n        async with async_session_maker() as session:\n            type = await session.execute(\n                select(Couriers.type)\n                .select_from(Couriers)\n                .where(Couriers.id == courier_id)\n            )",
        "detail": "app.couriers.dao",
        "documentation": {}
    },
    {
        "label": "Couriers",
        "kind": 6,
        "importPath": "app.couriers.models",
        "description": "app.couriers.models",
        "peekOfCode": "class Couriers(Base):\n    __tablename__ = \"couriers\"\n    id = Column(Integer, primary_key=True)\n    type = Column(String, nullable=False)\n    regions = Column(ARRAY(Integer), nullable=False)\n    working_hours = Column(ARRAY(String), nullable=False)",
        "detail": "app.couriers.models",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "app.couriers.router",
        "description": "app.couriers.router",
        "peekOfCode": "router = APIRouter(\n    prefix=\"/couriers\",\n    tags=[\"Couriers\"]\n)\n_incomeC = {\n    'FOOT': 2,\n    'BIKE': 3,\n    'AUTO': 4\n}\n_raitingC = {",
        "detail": "app.couriers.router",
        "documentation": {}
    },
    {
        "label": "_incomeC",
        "kind": 5,
        "importPath": "app.couriers.router",
        "description": "app.couriers.router",
        "peekOfCode": "_incomeC = {\n    'FOOT': 2,\n    'BIKE': 3,\n    'AUTO': 4\n}\n_raitingC = {\n    'FOOT': 3,\n    'BIKE': 2,\n    'AUTO': 1\n}",
        "detail": "app.couriers.router",
        "documentation": {}
    },
    {
        "label": "_raitingC",
        "kind": 5,
        "importPath": "app.couriers.router",
        "description": "app.couriers.router",
        "peekOfCode": "_raitingC = {\n    'FOOT': 3,\n    'BIKE': 2,\n    'AUTO': 1\n}\n@router.post(\"\")\nasync def add_couriers(request: Request, couriers_data: list[SCouriers]):\n    for courier in couriers_data:\n        await CouriersDAO.add(type=courier.type, regions=courier.regions , working_hours=courier.working_hours)\n@router.get(\"/{courier_id}\")",
        "detail": "app.couriers.router",
        "documentation": {}
    },
    {
        "label": "CourierType",
        "kind": 6,
        "importPath": "app.couriers.schemas",
        "description": "app.couriers.schemas",
        "peekOfCode": "class CourierType(str, Enum):\n    FOOT = \"FOOT\"\n    BIKE = \"BIKE\"\n    AUTO = \"AUTO\"\nclass SCouriers(BaseModel):\n    type: CourierType\n    regions: list[int]\n    working_hours: list[str]\n    class Config:\n        orm_mode = True",
        "detail": "app.couriers.schemas",
        "documentation": {}
    },
    {
        "label": "SCouriers",
        "kind": 6,
        "importPath": "app.couriers.schemas",
        "description": "app.couriers.schemas",
        "peekOfCode": "class SCouriers(BaseModel):\n    type: CourierType\n    regions: list[int]\n    working_hours: list[str]\n    class Config:\n        orm_mode = True",
        "detail": "app.couriers.schemas",
        "documentation": {}
    },
    {
        "label": "BaseDAO",
        "kind": 6,
        "importPath": "app.dao.base",
        "description": "app.dao.base",
        "peekOfCode": "class BaseDAO:\n    model = None\n    @classmethod\n    async def find_by_id(cls, model_id: int):\n        async with async_session_maker() as session:\n            query = select(cls.model).filter_by(id=model_id)\n            result = await session.execute(query)\n            return result.scalar_one_or_none()\n    @classmethod\n    async def find_one_or_none(cls, **filter_by):",
        "detail": "app.dao.base",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "app.migrations.versions.b528e134732b_initial_migration",
        "description": "app.migrations.versions.b528e134732b_initial_migration",
        "peekOfCode": "def upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('couriers',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('type', sa.String(), nullable=False),\n    sa.Column('regions', sa.ARRAY(sa.Integer()), nullable=False),\n    sa.Column('working_hours', sa.ARRAY(sa.String()), nullable=False),\n    sa.PrimaryKeyConstraint('id')\n    )\n    op.create_table('assignments',",
        "detail": "app.migrations.versions.b528e134732b_initial_migration",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "app.migrations.versions.b528e134732b_initial_migration",
        "description": "app.migrations.versions.b528e134732b_initial_migration",
        "peekOfCode": "def downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_table('orders')\n    op.drop_table('assignments')\n    op.drop_table('couriers')\n    # ### end Alembic commands ###",
        "detail": "app.migrations.versions.b528e134732b_initial_migration",
        "documentation": {}
    },
    {
        "label": "revision",
        "kind": 5,
        "importPath": "app.migrations.versions.b528e134732b_initial_migration",
        "description": "app.migrations.versions.b528e134732b_initial_migration",
        "peekOfCode": "revision = 'b528e134732b'\ndown_revision = None\nbranch_labels = None\ndepends_on = None\ndef upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('couriers',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('type', sa.String(), nullable=False),\n    sa.Column('regions', sa.ARRAY(sa.Integer()), nullable=False),",
        "detail": "app.migrations.versions.b528e134732b_initial_migration",
        "documentation": {}
    },
    {
        "label": "down_revision",
        "kind": 5,
        "importPath": "app.migrations.versions.b528e134732b_initial_migration",
        "description": "app.migrations.versions.b528e134732b_initial_migration",
        "peekOfCode": "down_revision = None\nbranch_labels = None\ndepends_on = None\ndef upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('couriers',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('type', sa.String(), nullable=False),\n    sa.Column('regions', sa.ARRAY(sa.Integer()), nullable=False),\n    sa.Column('working_hours', sa.ARRAY(sa.String()), nullable=False),",
        "detail": "app.migrations.versions.b528e134732b_initial_migration",
        "documentation": {}
    },
    {
        "label": "branch_labels",
        "kind": 5,
        "importPath": "app.migrations.versions.b528e134732b_initial_migration",
        "description": "app.migrations.versions.b528e134732b_initial_migration",
        "peekOfCode": "branch_labels = None\ndepends_on = None\ndef upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('couriers',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('type', sa.String(), nullable=False),\n    sa.Column('regions', sa.ARRAY(sa.Integer()), nullable=False),\n    sa.Column('working_hours', sa.ARRAY(sa.String()), nullable=False),\n    sa.PrimaryKeyConstraint('id')",
        "detail": "app.migrations.versions.b528e134732b_initial_migration",
        "documentation": {}
    },
    {
        "label": "depends_on",
        "kind": 5,
        "importPath": "app.migrations.versions.b528e134732b_initial_migration",
        "description": "app.migrations.versions.b528e134732b_initial_migration",
        "peekOfCode": "depends_on = None\ndef upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('couriers',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('type', sa.String(), nullable=False),\n    sa.Column('regions', sa.ARRAY(sa.Integer()), nullable=False),\n    sa.Column('working_hours', sa.ARRAY(sa.String()), nullable=False),\n    sa.PrimaryKeyConstraint('id')\n    )",
        "detail": "app.migrations.versions.b528e134732b_initial_migration",
        "documentation": {}
    },
    {
        "label": "run_migrations_offline",
        "kind": 2,
        "importPath": "app.migrations.env",
        "description": "app.migrations.env",
        "peekOfCode": "def run_migrations_offline() -> None:\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation\n    we don't even need a DBAPI to be available.\n    Calls to context.execute() here emit the given string to the\n    script output.\n    \"\"\"\n    url = config.get_main_option(\"sqlalchemy.url\")",
        "detail": "app.migrations.env",
        "documentation": {}
    },
    {
        "label": "run_migrations_online",
        "kind": 2,
        "importPath": "app.migrations.env",
        "description": "app.migrations.env",
        "peekOfCode": "def run_migrations_online() -> None:\n    \"\"\"Run migrations in 'online' mode.\n    In this scenario we need to create an Engine\n    and associate a connection with the context.\n    \"\"\"\n    connectable = engine_from_config(\n        config.get_section(config.config_ini_section, {}),\n        prefix=\"sqlalchemy.\",\n        poolclass=pool.NullPool,\n    )",
        "detail": "app.migrations.env",
        "documentation": {}
    },
    {
        "label": "config",
        "kind": 5,
        "importPath": "app.migrations.env",
        "description": "app.migrations.env",
        "peekOfCode": "config = context.config\nconfig.set_main_option(\"sqlalchemy.url\", f\"{settings.DATABASE_URL}?async_fallback=True\")\n# Interpret the config file for Python logging.\n# This line sets up loggers basically.\nif config.config_file_name is not None:\n    fileConfig(config.config_file_name)\n# add your model's MetaData object here\n# for 'autogenerate' support\n# from myapp import mymodel\n# target_metadata = mymodel.Base.metadata",
        "detail": "app.migrations.env",
        "documentation": {}
    },
    {
        "label": "target_metadata",
        "kind": 5,
        "importPath": "app.migrations.env",
        "description": "app.migrations.env",
        "peekOfCode": "target_metadata = Base.metadata\n# other values from the config, defined by the needs of env.py,\n# can be acquired:\n# my_important_option = config.get_main_option(\"my_important_option\")\n# ... etc.\ndef run_migrations_offline() -> None:\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation",
        "detail": "app.migrations.env",
        "documentation": {}
    },
    {
        "label": "OrdersDAO",
        "kind": 6,
        "importPath": "app.orders.dao",
        "description": "app.orders.dao",
        "peekOfCode": "class OrdersDAO(BaseDAO):\n    model = Orders\n    @classmethod\n    async def update_completed_order(cls, order_id: int, courier_id: int, complition_time: str):\n        async with async_session_maker() as session:\n            check = await session.execute(\n                select(Assignments.order_id)\n                .select_from(Assignments)\n                .where(\n                    and_(",
        "detail": "app.orders.dao",
        "documentation": {}
    },
    {
        "label": "Orders",
        "kind": 6,
        "importPath": "app.orders.models",
        "description": "app.orders.models",
        "peekOfCode": "class Orders(Base):\n    __tablename__ = \"orders\"\n    id = Column(Integer, primary_key=True)\n    weight = Column(Float, nullable=False)\n    region = Column(Integer, nullable=False)\n    time = Column(String, nullable=False)\n    price = Column(Float, nullable=False)\n    status = Column(String, default=\"PENDING\", nullable=True)\n    complition_time = Column(String, nullable=True)\n    courier_id = Column(Integer, ForeignKey(\"couriers.id\"),nullable=True)",
        "detail": "app.orders.models",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "app.orders.router",
        "description": "app.orders.router",
        "peekOfCode": "router = APIRouter(\n    prefix=\"/orders\",\n    tags=[\"Orders\"]\n)\n@router.post(\"\")\nasync def add_orders(request: Request, orders_data: list[SOrders]):\n    for order in orders_data:\n        await OrdersDAO.add(weight=order.weight, region=order.region, time=order.time, price=order.price)\n@router.get(\"/{order_id}\")\nasync def get_order_by_id(request: Request, order_id: int) -> FOrders:",
        "detail": "app.orders.router",
        "documentation": {}
    },
    {
        "label": "SOrders",
        "kind": 6,
        "importPath": "app.orders.schemas",
        "description": "app.orders.schemas",
        "peekOfCode": "class SOrders(BaseModel):\n    weight: float\n    region: int\n    time: str\n    price: float\n    class Config:\n        orm_mode = True\nclass FOrders(BaseModel):\n    weight: float\n    region: int",
        "detail": "app.orders.schemas",
        "documentation": {}
    },
    {
        "label": "FOrders",
        "kind": 6,
        "importPath": "app.orders.schemas",
        "description": "app.orders.schemas",
        "peekOfCode": "class FOrders(BaseModel):\n    weight: float\n    region: int\n    time: str\n    price: float\n    status: str\n    complition_time: Optional[str] = Field(..., nullable=True)\n    courier_id: Optional[int] = Field(..., nullable=True)\n    class Config:\n        orm_mode = True",
        "detail": "app.orders.schemas",
        "documentation": {}
    },
    {
        "label": "Settings",
        "kind": 6,
        "importPath": "app.config",
        "description": "app.config",
        "peekOfCode": "class Settings(BaseSettings):\n    DB_HOST:str\n    DB_PORT:int\n    DB_USER:str\n    DB_PASS:str\n    DB_NAME:str\n    SECRET_KEY:str\n    ALGORITHM:str\n    @property\n    def DATABASE_URL(self):",
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "kind": 5,
        "importPath": "app.config",
        "description": "app.config",
        "peekOfCode": "settings = Settings()",
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 6,
        "importPath": "app.db",
        "description": "app.db",
        "peekOfCode": "class Base(DeclarativeBase):\n    pass",
        "detail": "app.db",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "app.db",
        "description": "app.db",
        "peekOfCode": "engine = create_async_engine(settings.DATABASE_URL)\nasync_session_maker = sessionmaker(engine, class_=AsyncSession, expire_on_commit=False)\nclass Base(DeclarativeBase):\n    pass",
        "detail": "app.db",
        "documentation": {}
    },
    {
        "label": "async_session_maker",
        "kind": 5,
        "importPath": "app.db",
        "description": "app.db",
        "peekOfCode": "async_session_maker = sessionmaker(engine, class_=AsyncSession, expire_on_commit=False)\nclass Base(DeclarativeBase):\n    pass",
        "detail": "app.db",
        "documentation": {}
    },
    {
        "label": "limiter",
        "kind": 5,
        "importPath": "app.main",
        "description": "app.main",
        "peekOfCode": "limiter = Limiter(key_func=get_remote_address, default_limits=[\"10/second\"])\napp = FastAPI()\napp.state.limiter = limiter\napp.add_exception_handler(RateLimitExceeded, _rate_limit_exceeded_handler)\napp.add_middleware(SlowAPIMiddleware)\napp.include_router(router_couriers)\napp.include_router(router_orders)",
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "app.main",
        "description": "app.main",
        "peekOfCode": "app = FastAPI()\napp.state.limiter = limiter\napp.add_exception_handler(RateLimitExceeded, _rate_limit_exceeded_handler)\napp.add_middleware(SlowAPIMiddleware)\napp.include_router(router_couriers)\napp.include_router(router_orders)",
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "app.state.limiter",
        "kind": 5,
        "importPath": "app.main",
        "description": "app.main",
        "peekOfCode": "app.state.limiter = limiter\napp.add_exception_handler(RateLimitExceeded, _rate_limit_exceeded_handler)\napp.add_middleware(SlowAPIMiddleware)\napp.include_router(router_couriers)\napp.include_router(router_orders)",
        "detail": "app.main",
        "documentation": {}
    }
]